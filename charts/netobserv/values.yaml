# Default values for netobserv

opensearch:
  enabled: false

elasticsearch:
  enabled: false

replicaCount: 1

# The update strategy to apply to the Deployment.
# Available options are: RollingUpdate and Recreate.
strategyType: RollingUpdate

image:
  repository: elastiflow/flow-collector
  pullPolicy: IfNotPresent
  # Overrides the image tag whose default is the chart appVersion.
  tag: ""

env:
  - name: EF_LICENSE_ACCEPTED
    value: 'true'
  # Additional information for available environment variables can be found via
  # the ElastiFlow documentation: https://docs.elastiflow.com/docs/config_ref

# The Elasticsearch output can be used to send records to an Elasticsearch cluster.
# https://docs.elastiflow.com/docs/config_ref/common/output_elasticsearch
outputElasticsearch:
  # Enable/disable the use of the Elasticsearch output.
  enabled: false
  # Secret name to be used for the Elasticsearch password. If empty, the secret name defaults to `elasticsearch-es-elastic-user`
  secretRef: "elasticsearch-es-elastic-user"
  # The key in the kubernetes scret that contains the Elasticsearch password.
  secretKey: elastic
  tls:
    # Enable/disable TLS connections to Elasticsearch.
    enabled: false
    # The name of the config map that contains the CA certificate.
    caConfigMap: ""
    # The path to the CA certificate file.
    caMountPath: ""
    # The key in the config map that contains the CA certificate.
    caConfigMapKey: "ca.crt"
    # The name of the file that contains the CA certificate.
    caFileName: "ca.crt"
  ecs:
    # Enable/disable the use of the Elastic Common Schema (ECS).
    enabled: false

# The OpenSearch output can be used to send records to an OpenSearch cluster.
# https://docs.elastiflow.com/docs/config_ref/common/output_opensearch
outputOpenSearch:
  # Enable/disable the use of the OpenSearch output.
  enabled: false
  # Secret name to be used for the OpenSearch password. If empty, the secret name defaults to `opensearch-es-elastic-user`
  secretRef: "opensearch-user"
  # The key in the kubernetes scret that contains the OpenSearch password.
  secretKey: opensearch-password
  tls:
    # Enable/disable TLS connections to OpenSearch.
    enabled: false
    # The name of the config map that contains the CA certificate.
    caConfigMap: ""
    # The path to the CA certificate file.
    caMountPath: ""
    # The key in the config map that contains the CA certificate.
    caConfigMapKey: "ca.crt"
    # The name of the file that contains the CA certificate.
    caFileName: "ca.crt"
  ecs:
    # Enable/disable the use of the Elastic Common Schema (ECS).
    enabled: false

# The Kafka output can be used to send records to Apache Kafka, Confluent Platform,
# Confluent Cloud, Redpanda and Amazon Managed Streaming for Apache Kafka (Amazon MSK).
# https://docs.elastiflow.com/docs/output-kafka
outputKafka:
  # Enable/disable the use of the Kafka output.
  enabled: false
  # A comma-separated list of brokers, IP address and port number, to which the collector is to connect.
  # Example: "192.0.2.11:9092,192.0.2.12:9092,192.0.2.13:9092"
  brokers: ""
  tls:
    # Enable/disable TLS connections to Kafka.
    enabled: false
    # The name of the config map that contains the CA certificate.
    caConfigMap: ""
    # The path to the CA certificate file.
    caMountPath: ""
    # The key in the config map that contains the CA certificate.
    caConfigMapKey: "ca.crt"
    # The name of the file that contains the CA certificate.
    caFileName: "ca.crt"

license:
  # Specifies whether a secret should be created. If you don't have a license, no need to create a license secret.
  createSecret: false
  # Secret name to be used for the license. If empty, the secret name defaults to `netobserv-license`
  # If no secret with a matching name exists, the value will be set from `licenseKey`.instead.
  secretRef: "netobserv-license"
  # Set account id, if not set, value from secret will be used
  accountId: ""
  # Set license key, if not set, value from secret will be used
  licenseKey: ""

# If the EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_ASN_ENABLE or EF_PROCESSOR_ENRICH_IPADDR_MAXMIND_GEOIP_ENABLE
# environment variables are set to true, enable the corresponding service and provide a MaxMind acount id and license key:
# https://dev.maxmind.com/geoip/geolite2-free-geolocation-data
maxmind:
  # Specifies whether a secret should be created for the maxmind license key.
  createSecret: false
  # Secret name to be used for the license. If empty, the secret name defaults to `maxmind-license`
  # If no secret with a matching name exists, the value will be set from `licenseKey`.instead.
  secretRef: "maxmind-license"
  # Enabling asn will look up the autonomous system number and autonomous system
  # organization associated with IPv4 and IPv6 addresses.
  asnEnabled: false
  # Enabling geoip will look up the country, subdivisions (regions), city, and
  # postal code associated with IPv4 and IPv6 addresses.
  geoipEnabled: false
  accountId: ""
  licenseKey: ""

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: false
  # Automatically mount a ServiceAccount's API credentials?
  automount: false
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  runAsNonRoot: true
  runAsUser: 1000
  runAsGroup: 1000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  annotations: {}
  # The type of service to create. Available options are ClusterIP (default), NodePort, and LoadBalancer.
  type: ClusterIP
  # When the service type is LoadBalancer, the externalTrafficPolicy field routes external traffic to either node-local or cluster-wide endpoints. The two options are:
  # Cluster (default): Obscures the client source IP, may cause a second hop to another node, but ensures good load-spreading.
  # Local: Preserves the client source IP, avoids a second hop for LoadBalancer and NodePort Services, but may lead to imbalanced traffic spreading.
  # externalTrafficPolicy: Cluster
  ports:
    - containerPort: 9995
      protocol: UDP
      name: netflow
    # - containerPort: 4739
    #   protocol: UDP
    #   name: ipfix
    # - containerPort: 6343
    #   protocol: UDP
    #   name: sflow

ingress:
  enabled: false
  className: ""
  annotations: {}
    # kubernetes.io/ingress.class: nginx
    # kubernetes.io/tls-acme: "true"
  hosts:
    - host: chart-example.local
      paths:
        - path: /
          pathType: ImplementationSpecific
  tls: []
  #  - secretName: chart-example-tls
  #    hosts:
  #      - chart-example.local

resources:
  limits:
    cpu: 100m
    memory: 128Mi
  requests:
    cpu: 100m
    memory: 128Mi

livenessProbe:
  enabled: false
  httpGet:
    path: /
    port: http
readinessProbe:
  enabled: false
  httpGet:
    path: /
    port: http

autoscaling:
  enabled: false
  minReplicas: 1
  maxReplicas: 100
  targetCPUUtilizationPercentage: 80
  # targetMemoryUtilizationPercentage: 80

nodeSelector: {}

selectorLabels: {}

tolerations: []

affinity: {}

topologySpreadConstraints: []
